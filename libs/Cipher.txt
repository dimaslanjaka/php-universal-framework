//const cryptLib = require("./Cipher"); //require("@skavinvarnan/cryptlib");

import crypto from "crypto";
import BufferList from "bl";

/**
 * CrossPlatform Cipher
 * This cross platform Cipher uses AES 256 for encryption. This library can
 * be used for encryptoion and de-cryption of string on iOS, Android, Windows
 * and Node platform.
 * Features:
 * 1. 256 bit AES encryption
 * 2. Random IV generation.
 * 3. Provision for SHA256 hashing of key.
 */
class Cipher_Core {
  private _maxKeySize: number;
  _maxIVSize: number;
  _algorithm: string;
  _charset: string;
  _encoding: string;
  _hashAlgo: string;
  _digestEncoding: any;
  _characterMatrixForRandomIVStringGeneration: string[];
  constructor() {
    this._maxKeySize = 32;
    this._maxIVSize = 16;
    this._algorithm = "AES-256-CBC";
    this._charset = "utf8";
    this._encoding = "base64";
    this._hashAlgo = "sha256";
    this._digestEncoding = "hex";

    this._characterMatrixForRandomIVStringGeneration = [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "-",
      "_",
    ];
  }

  /**
   * private function: _encryptDecrypt
   * encryptes or decrypts to or from text or encrypted text given an iv and key
   * @param  {string}  text        can be plain text or encrypted text
   * @param  {string}  key         the key used to encrypt or decrypt
   * @param  {string}  initVector  the initialization vector to encrypt or
   *                               decrypt
   * @param  {bool}    isEncrypt   true = encryption, false = decryption
   * @return {string}              encryted text or plain text
   */
  _encryptDecrypt(
    text: string,
    key: string,
    initVector: string,
    isEncrypt: boolean
  ): string {
    if (!text || !key) {
      throw (
        "cryptLib._encryptDecrypt: -> key and plain or encrypted text " +
        "required"
      );
    }

    let ivBl = new BufferList(),
      keyBl = new BufferList(),
      keyCharArray = key.split(""),
      ivCharArray = [],
      encryptor: {
        setEncoding: (arg0: string) => void;
        write: (arg0: any) => void;
        end: () => void;
        read: () => any;
      },
      decryptor: {
        update: (arg0: any, arg1: string, arg2: string) => any;
        final: (arg0: string) => any;
      },
      clearText: any;

    if (initVector && initVector.length > 0) {
      ivCharArray = initVector.split("");
    }

    for (let i = 0; i < this._maxIVSize; i++) {
      ivBl.append(ivCharArray.shift() || [null]);
    }

    for (let i = 0; i < this._maxKeySize; i++) {
      keyBl.append(keyCharArray.shift() || [null]);
    }

    if (isEncrypt) {
      encryptor = crypto.createCipheriv(
        this._algorithm,
        keyBl.toString(),
        ivBl.toString()
      );
      encryptor.setEncoding(this._encoding);
      encryptor.write(text);
      encryptor.end();
      return encryptor.read();
    }

    decryptor = crypto.createDecipheriv(
      this._algorithm,
      keyBl.toString(),
      ivBl.toString()
    );
    let dec = decryptor.update(text, this._encoding, this._charset);
    dec += decryptor.final(this._charset);
    return dec;
  }

  /**
   * private function: _isCorrectLength
   * checks if length is preset and is a whole number and > 0
   * @param  {int}  length
   * @return {bool}
   */
  _isCorrectLength(length: string): Boolean {
    return length && /^\d+$/.test(length) && parseInt(length, 10) !== 0;
  }

  /**
   * generates random initaliztion vector given a length
   * @param  {int}  length  the length of the iv to be generated
   */
  generateRandomIV(length: any) {
    if (!this._isCorrectLength(length)) {
      throw "cryptLib.generateRandomIV() -> needs length or in wrong format";
    }

    let randomBytes = crypto.randomBytes(length),
      _iv = [];

    for (let i = 0; i < length; i++) {
      let ptr =
        randomBytes[i] %
        this._characterMatrixForRandomIVStringGeneration.length;
      _iv[i] = this._characterMatrixForRandomIVStringGeneration[ptr];
    }
    return _iv.join("");
  }

  generateRandomIV16() {
    let randomBytes = crypto.randomBytes(16),
      _iv = [];

    for (let i = 0; i < 16; i++) {
      let ptr =
        randomBytes[i] %
        this._characterMatrixForRandomIVStringGeneration.length;
      _iv[i] = this._characterMatrixForRandomIVStringGeneration[ptr];
    }
    return _iv.join("");
  }

  /**
   * Creates a hash of a key using SHA-256 algorithm
   * @param  {string} key     the key that will be hashed
   * @param  {int}    length  the length of the SHA-256 hash
   * @return {string}         the output hash generated given a key and length
   */
  getHashSha256(key: any, length: any): string {
    if (!key) {
      throw "cryptLib.getHashSha256() -> needs key";
    }

    if (!this._isCorrectLength(length)) {
      throw "cryptLib.getHashSha256() -> needs length or in wrong format";
    }

    return crypto
      .createHash(this._hashAlgo)
      .update(key)
      .digest(this._digestEncoding)
      .substring(0, length);
  }

  /**
   * encryptes plain text given a key and initialization vector
   * @param  {string}  text        can be plain text or encrypted text
   * @param  {string}  key         the key used to encrypt or decrypt
   * @param  {string}  initVector  the initialization vector to encrypt or
   *                               decrypt
   * @return {string}              encryted text or plain text
   */
  encrypt(plainText: any, key: any, initVector: any): string {
    return this._encryptDecrypt(plainText, key, initVector, true);
  }

  /**
   * decrypts encrypted text given a key and initialization vector
   * @param  {string}  text        can be plain text or encrypted text
   * @param  {string}  key         the key used to encrypt or decrypt
   * @param  {string}  initVector  the initialization vector to encrypt or
   *                               decrypt
   * @return {string}              encryted text or plain text
   */
  decrypt(encryptedText: any, key: any, initVector: any): string {
    return this._encryptDecrypt(encryptedText, key, initVector, false);
  }

  encryptPlainTextWithRandomIV(plainText: string, key: any) {
    return this._encryptDecrypt(
      this.generateRandomIV16() + plainText,
      this.getHashSha256(key, 32),
      this.generateRandomIV16(),
      true
    );
  }

  decryptCipherTextWithRandomIV(cipherText: any, key: any) {
    let out = this._encryptDecrypt(
      cipherText,
      this.getHashSha256(key, 32),
      this.generateRandomIV16(),
      false
    );
    return out.substring(16, out.length);
  }
}

class Cipher {
  private static key: string = "BlVssQKxzAHFAUNZbqvwS+yKw/m";
  /**
   * set secret key
   * @param ky secret key
   */
  static setKey(ky: string) {
    Cipher.key = ky;
  }
  /**
   * Get secret key
   */
  static getKey() {
    return Cipher.key;
  }
  /**
   * encrypt text
   * @param text
   * @param secret
   */
  static encrypt(text: string, secret: string = null) {
    if (secret != null) {
      return new Cipher_Core().encryptPlainTextWithRandomIV(text, secret);
    }
    return new Cipher_Core().encryptPlainTextWithRandomIV(text, Cipher.key);
  }
  /**
   * decrypt encrypted text
   * @param enc_text
   * @param secret
   */
  static decrypt(enc_text: string, secret: string = null) {
    if (secret != null) {
      return new Cipher_Core().decryptCipherTextWithRandomIV(enc_text, secret);
    }
    return new Cipher_Core().decryptCipherTextWithRandomIV(
      enc_text,
      Cipher.key
    );
  }
}

/*
const plainText = "The quick brown fox jumps over to the lazy dog.";
const key = "BlVssQKxzAHFAUNZbqvwS+yKw/m";

//const cryptLib = require(path.join(__dirname, "/../../src/Crypto/Cipher"));

const cipherText = cryptLib.encryptPlainTextWithRandomIV(plainText, key);
console.log(cipherText);

const decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipherText, key);
console.log(decryptedString);
*/
