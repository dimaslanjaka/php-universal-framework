$((function(){"use strict";QUnit.module("button plugin"),QUnit.test("should be defined on jquery object",(function(t){t.expect(1),t.ok($(document.body).button,"button method is defined")})),QUnit.module("button",{beforeEach:function(){$.fn.bootstrapButton=$.fn.button.noConflict()},afterEach:function(){$.fn.button=$.fn.bootstrapButton,delete $.fn.bootstrapButton,$("#qunit-fixture").html("")}}),QUnit.test("should provide no conflict",(function(t){t.expect(1),t.strictEqual(typeof $.fn.button,"undefined","button was set back to undefined (org value)")})),QUnit.test("should return jquery collection containing the element",(function(t){t.expect(2);var e=$("<div/>"),n=e.bootstrapButton();t.ok(n instanceof $,"returns jquery collection"),t.strictEqual(n[0],e[0],"collection contains element")})),QUnit.test("should toggle active",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button">mdo</button>');t.ok(!e.hasClass("active"),"btn does not have active class"),e.bootstrapButton("toggle"),t.ok(e.hasClass("active"),"btn has class active")})),QUnit.test("should toggle active when btn children are clicked",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button">mdo</button>'),n=$("<i/>");e.append(n).appendTo("#qunit-fixture"),t.ok(!e.hasClass("active"),"btn does not have active class"),n.trigger("click"),t.ok(e.hasClass("active"),"btn has class active")})),QUnit.test("should toggle aria-pressed",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>');t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),e.bootstrapButton("toggle"),t.strictEqual(e.attr("aria-pressed"),"true","btn aria-pressed state is true")})),QUnit.test("should not toggle aria-pressed on buttons with disabled class",(function(t){t.expect(2);var e=$('<button class="btn disabled" data-toggle="button" aria-pressed="false">redux</button>');t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),e.bootstrapButton("toggle"),t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is still false")})),QUnit.test("should not toggle aria-pressed on buttons that are disabled",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button" aria-pressed="false" disabled>redux</button>');t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),e.bootstrapButton("toggle"),t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is still false")})),QUnit.test("should toggle aria-pressed on buttons with container",(function(t){t.expect(1);var e='<div class="btn-group" data-toggle="buttons"><button id="btn1" class="btn btn-secondary" type="button">One</button><button class="btn btn-secondary" type="button">Two</button></div>';$("#qunit-fixture").append(e),$("#btn1").bootstrapButton("toggle"),t.strictEqual($("#btn1").attr("aria-pressed"),"true")})),QUnit.test("should toggle aria-pressed when btn children are clicked",(function(t){t.expect(2);var e=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>'),n=$("<i/>");e.append(n).appendTo("#qunit-fixture"),t.strictEqual(e.attr("aria-pressed"),"false","btn aria-pressed state is false"),n.trigger("click"),t.strictEqual(e.attr("aria-pressed"),"true","btn aria-pressed state is true")})),QUnit.test('should assign active class on page load to buttons with aria-pressed="true"',(function(t){t.expect(1);var e=t.async(),n=$('<button class="btn" data-toggle="button" aria-pressed="true">mdo</button>');n.appendTo("#qunit-fixture"),$(window).trigger($.Event("load")),setTimeout((function(){t.ok(n.hasClass("active"),'button with aria-pressed="true" has been given class active'),e()}),5)})),QUnit.test("should assign active class on page load to button checkbox with checked attribute",(function(t){t.expect(1);var e=t.async(),n='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="checkbox" id="radio" checked> Checkbox</label></div>',i=$(n).appendTo("#qunit-fixture"),a=i.children().eq(0);$(window).trigger($.Event("load")),setTimeout((function(){t.ok(a.hasClass("active"),"checked checkbox button has been given class active"),e()}),5)})),QUnit.test('should remove active class on page load from buttons without aria-pressed="true"',(function(t){t.expect(1);var e=t.async(),n=$('<button class="btn active" data-toggle="button" aria-pressed="false">mdo</button>');n.appendTo("#qunit-fixture"),$(window).trigger($.Event("load")),setTimeout((function(){t.ok(!n.hasClass("active"),'button without aria-pressed="true" has had active class removed'),e()}),5)})),QUnit.test("should remove active class on page load from button checkbox without checked attribute",(function(t){t.expect(1);var e=t.async(),n='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="checkbox" id="radio"> Checkbox</label></div>',i=$(n).appendTo("#qunit-fixture"),a=i.children().eq(0);$(window).trigger($.Event("load")),setTimeout((function(){t.ok(!a.hasClass("active"),"unchecked checkbox button has had active class removed"),e()}),5)})),QUnit.test("should trigger input change event when toggled button has input field",(function(t){t.expect(1);var e=t.async(),n='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="radio" id="radio">Radio</label></div>',i=$(n).appendTo("#qunit-fixture");i.find("input").on("change",(function(n){n.preventDefault(),t.ok(!0,"change event fired"),e()})),i.find("label").trigger("click")})),QUnit.test("should trigger label change event only once",(function(t){t.expect(1);var e=t.async(),n=0,i='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="checkbox"><span class="check">\u2713</span> <i class="far fa-clipboard"></i> <span class="d-none d-lg-inline">checkbox</span></label></div>',a=$(i).appendTo("#qunit-fixture"),o=a.children().eq(0);a.find("label").on("change",(function(){n++})),setTimeout((function(){t.ok(1===n,"onchange event fired only once"),e()}),5),o[0].click()})),QUnit.test("should check for closest matching toggle",(function(t){t.expect(18);var e='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="radio" name="options" id="option1" checked="true"> Option 1</label><label class="btn btn-primary"><input type="radio" name="options" id="option2"> Option 2</label><label class="btn btn-primary"><input type="radio" name="options" id="option3"> Option 3</label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=n.children().eq(1);t.ok(i.hasClass("active"),"btn1 has active class"),t.ok(i.find("input").prop("checked"),"btn1 is checked"),t.ok(!a.hasClass("active"),"btn2 does not have active class"),t.ok(!a.find("input").prop("checked"),"btn2 is not checked"),a.find("input").trigger("click"),t.ok(!i.hasClass("active"),"btn1 does not have active class"),t.ok(!i.find("input").prop("checked"),"btn1 is not checked"),t.ok(a.hasClass("active"),"btn2 has active class"),t.ok(a.find("input").prop("checked"),"btn2 is checked"),a.find("input").trigger("click"),t.ok(!i.hasClass("active"),"btn1 does not have active class"),t.ok(!i.find("input").prop("checked"),"btn1 is not checked"),t.ok(a.hasClass("active"),"btn2 has active class"),t.ok(a.find("input").prop("checked"),"btn2 is checked"),i.bootstrapButton("toggle"),t.ok(i.hasClass("active"),"btn1 has active class"),t.ok(i.find("input").prop("checked"),"btn1 prop is checked"),t.ok(i.find("input")[0].checked,"btn1 is checked with jquery"),t.ok(!a.hasClass("active"),"btn2 does not have active class"),t.ok(!a.find("input").prop("checked"),"btn2 is not checked"),t.ok(!a.find("input")[0].checked,"btn2 is not checked")})),QUnit.test("should fire click event on input",(function(t){t.expect(1);var e=t.async(),n='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="checkbox" id="option1"> Option 1</label></div>',i=$(n).appendTo("#qunit-fixture"),a=i.children().eq(0);i.find("input").on("click",(function(n){n.preventDefault(),t.ok(!0,"click event fired"),e()})),a[0].click()})),QUnit.test("should fire click event on label",(function(t){t.expect(1);var e=t.async(),n='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="checkbox" id="option1"> Option 1</label></div>',i=$(n).appendTo("#qunit-fixture"),a=i.children().eq(0);i.find("label").on("click",(function(n){n.preventDefault(),t.ok(!0,"click event fired"),e()})),a[0].click()})),QUnit.test('should not add aria-pressed on labels for radio/checkbox inputs in a data-toggle="buttons" group',(function(t){t.expect(2);var e='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary"><input type="checkbox"> Checkbox</label><label class="btn btn-primary"><input type="radio" name="options"> Radio</label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=n.children().eq(1);i.find("input").trigger("click"),t.ok(i.is(":not([aria-pressed])"),"label for nested checkbox input has not been given an aria-pressed attribute"),a.find("input").trigger("click"),t.ok(a.is(":not([aria-pressed])"),"label for nested radio input has not been given an aria-pressed attribute")})),QUnit.test("should handle disabled attribute on non-button elements",(function(t){t.expect(4);var e='<div class="btn-group disabled" data-toggle="buttons" aria-disabled="true" disabled><label class="btn btn-danger disabled"><input type="checkbox" aria-disabled="true" disabled></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"button is initially not active"),t.ok(!a.prop("checked"),"checkbox is initially not checked"),i[0].click(),t.ok(i.is(":not(.active)"),"button did not become active"),t.ok(!a.prop("checked"),"checkbox did not get checked")})),QUnit.test("should not set active class if inner hidden checkbox is disabled but author forgot to set disabled class on outer button",(function(t){t.expect(4);var e='<div class="btn-group" data-toggle="buttons"><label class="btn btn-danger"><input type="checkbox" disabled></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"button is initially not active"),t.ok(!a.prop("checked"),"checkbox is initially not checked"),i[0].click(),t.ok(i.is(":not(.active)"),"button did not become active"),t.ok(!a.prop("checked"),"checkbox did not get checked")})),QUnit.test("should correctly set checked state on input and active class on label when using <label><input></label> structure",(function(t){t.expect(4);var e='<div class="btn-group" data-toggle="buttons"><label class="btn"><input type="checkbox"></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"label is initially not active"),t.ok(!a.prop("checked"),"checkbox is initially not checked"),i[0].click(),t.ok(i.is(".active"),"label is active after click"),t.ok(a.prop("checked"),"checkbox is checked after click")})),QUnit.test("should correctly set checked state on input and active class on the faked button when using <div><input></div> structure",(function(t){t.expect(4);var e='<div class="btn-group" data-toggle="buttons"><div class="btn"><input type="checkbox" aria-label="Check"></div></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"<div> is initially not active"),t.ok(!a.prop("checked"),"checkbox is initially not checked"),i[0].click(),t.ok(i.is(".active"),"<div> is active after click"),t.ok(a.prop("checked"),"checkbox is checked after click")})),QUnit.test("should correctly set checked state on input and active class on the label when using button toggle",(function(t){t.expect(6);var e='<div class="btn-group" data-toggle="buttons"><label class="btn"><input type="checkbox"></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"<label> is initially not active"),t.ok(!a.prop("checked"),"checkbox property is initially not checked"),t.ok(!a[0].checked,"checkbox is not checked by jquery after click"),i.bootstrapButton("toggle"),t.ok(i.is(".active"),"<label> is active after click"),t.ok(a.prop("checked"),"checkbox property is checked after click"),t.ok(a[0].checked,"checkbox is checked by jquery after click")})),QUnit.test("should not do anything if the click was just sent to the outer container with data-toggle",(function(t){t.expect(4);var e='<div class="btn-group" data-toggle="buttons"><label class="btn"><input type="checkbox"></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(i.is(":not(.active)"),"label is initially not active"),t.ok(!a.prop("checked"),"checkbox is initially not checked"),n[0].click(),t.ok(i.is(":not(.active)"),"label is not active after click"),t.ok(!a.prop("checked"),"checkbox is not checked after click")})),QUnit.test('should not try and set checked property on an input of type="hidden"',(function(t){t.expect(2);var e='<div class="btn-group" data-toggle="buttons"><label class="btn"><input type="hidden"></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(!a.prop("checked"),"hidden input initially has no checked property"),i[0].click(),t.ok(!a.prop("checked"),"hidden input does not have a checked property")})),QUnit.test("should not try and set checked property on an input that is not a radio button or checkbox",(function(t){t.expect(2);var e='<div class="btn-group" data-toggle="buttons"><label class="btn"><input type="text"></label></div>',n=$(e).appendTo("#qunit-fixture"),i=n.children().eq(0),a=i.children().eq(0);t.ok(!a.prop("checked"),"text input initially has no checked property"),i[0].click(),t.ok(!a.prop("checked"),"text input does not have a checked property")})),QUnit.test("dispose should remove data and the element",(function(t){t.expect(2);var e=$("<div/>"),n=e.bootstrapButton();t.ok("undefined"!==typeof n.data("bs.button")),n.data("bs.button").dispose(),t.ok("undefined"===typeof n.data("bs.button"))})),QUnit.test("should return button version",(function(t){t.expect(1),"undefined"!==typeof Button?t.ok("string"===typeof Button.VERSION):t.notOk()}))}));