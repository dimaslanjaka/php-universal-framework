$((function(){"use strict";QUnit.module("dropdowns plugin"),QUnit.test("should be defined on jquery object",(function(o){o.expect(1),o.ok($(document.body).dropdown,"dropdown method is defined")})),QUnit.module("dropdowns",{beforeEach:function(){$.fn.bootstrapDropdown=$.fn.dropdown.noConflict()},afterEach:function(){$.fn.dropdown=$.fn.bootstrapDropdown,delete $.fn.bootstrapDropdown,$("#qunit-fixture").html("")}}),QUnit.test("should provide no conflict",(function(o){o.expect(1),o.strictEqual(typeof $.fn.dropdown,"undefined","dropdown was set back to undefined (org value)")})),QUnit.test("should throw explicit error on undefined method",(function(o){o.expect(1);var d=$("<div/>");d.bootstrapDropdown();try{d.bootstrapDropdown("noMethod")}catch(n){o.strictEqual(n.message,'No method named "noMethod"')}})),QUnit.test("should return jquery collection containing the element",(function(o){o.expect(2);var d=$("<div/>"),n=d.bootstrapDropdown();o.ok(n instanceof $,"returns jquery collection"),o.strictEqual(n[0],d[0],"collection contains element")})),QUnit.test("should not open dropdown if target is disabled via attribute",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><button disabled href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>';$(n).appendTo("#qunit-fixture");var e=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.on("click",(function(){o.ok(!e.parent(".dropdown").hasClass("show")),d()})),e.trigger($.Event("click"))})),QUnit.test("should not open dropdown if escape key was pressed on the toggle",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><button disabled href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>';$(n).appendTo("#qunit-fixture");var e=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$('button[data-toggle="dropdown"]');t.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(!e.parent(".dropdown").hasClass("show"),"dropdown menu is not shown after escape pressed"),d()})),QUnit.test("should not add class position-static to dropdown if boundary not set",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a></div></div></div>',e=$(n).find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(!e.parent(".dropdown").hasClass("position-static"),'"position-static" class not added'),d()})),e.trigger("click")})),QUnit.test("should add class position-static to dropdown if boundary not scrollParent",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" data-boundary="viewport">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a></div></div></div>',e=$(n).find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("position-static"),'"position-static" class added'),d()})),e.trigger("click")})),QUnit.test('should set aria-expanded="true" on target when dropdown menu is shown',(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.strictEqual(e.attr("aria-expanded"),"true",'aria-expanded is set to string "true" on click'),d()})),e.trigger("click")})),QUnit.test('should set aria-expanded="false" on target when dropdown menu is hidden',(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" aria-expanded="false" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("hidden.bs.dropdown",(function(){o.strictEqual(e.attr("aria-expanded"),"false",'aria-expanded is set to string "false" on hide'),d()})),e.trigger("click"),$(document.body).trigger("click")})),QUnit.test("should not open dropdown if target is disabled via class",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><button href="#" class="btn dropdown-toggle disabled" data-toggle="dropdown">Dropdown</button><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>';$(n).appendTo("#qunit-fixture");var e=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.on("click",(function(){o.ok(!e.parent(".dropdown").hasClass("show")),d()})),e.trigger($.Event("click"))})),QUnit.test("should add class show to menu if clicked",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("show"),'"show" class added on click'),d()})),e.trigger("click")})),QUnit.test('should remove "show" class if body is clicked',(function(o){o.expect(2);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("show"),'"show" class added on click'),$(document.body).trigger("click")})).on("hidden.bs.dropdown",(function(){o.ok(!e.parent(".dropdown").hasClass("show"),'"show" class removed'),d()})),e.trigger("click")})),QUnit.test('should remove "show" class if tabbing outside of menu',(function(o){o.expect(2);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="dropdown-divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("show"),'"show" class added on click');var d=$.Event("keyup");d.which=9,$(document.body).trigger(d)})).on("hidden.bs.dropdown",(function(){o.ok(!e.parent(".dropdown").hasClass("show"),'"show" class removed'),d()})),e.trigger("click")})),QUnit.test('should remove "show" class if body is clicked, with multiple dropdowns',(function(o){o.expect(7);var d=o.async(),n='<div class="nav"><div class="dropdown" id="testmenu"><a class="dropdown-toggle" data-toggle="dropdown" href="#testmenu">Test menu</a><div class="dropdown-menu"><a class="dropdown-item" href="#sub1">Submenu 1</a></div></div></div><div class="btn-group"><button class="btn">Actions</button><button class="btn dropdown-toggle" data-toggle="dropdown"></button><div class="dropdown-menu"><a class="dropdown-item" href="#">Action 1</a></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]'),t=e.first(),a=e.last();o.strictEqual(e.length,2,"two dropdowns"),t.parent(".dropdown").on("shown.bs.dropdown",(function(){o.strictEqual(t.parents(".show").length,1,'"show" class added on click'),o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,1,"only one dropdown is shown"),$(document.body).trigger("click")})).on("hidden.bs.dropdown",(function(){o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,0,'"show" class removed'),a.trigger("click")})),a.parent(".btn-group").on("shown.bs.dropdown",(function(){o.strictEqual(a.parent(".show").length,1,'"show" class added on click'),o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,1,"only one dropdown is shown"),$(document.body).trigger("click")})).on("hidden.bs.dropdown",(function(){o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,0,'"show" class removed'),d()})),t.trigger("click")})),QUnit.test('should remove "show" class if body if tabbing outside of menu, with multiple dropdowns',(function(o){o.expect(7);var d=o.async(),n='<div class="nav"><div class="dropdown" id="testmenu"><a class="dropdown-toggle" data-toggle="dropdown" href="#testmenu">Test menu</a><div class="dropdown-menu"><a class="dropdown-item" href="#sub1">Submenu 1</a></div></div></div><div class="btn-group"><button class="btn">Actions</button><button class="btn dropdown-toggle" data-toggle="dropdown"></button><div class="dropdown-menu"><a class="dropdown-item" href="#">Action 1</a></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]'),t=e.first(),a=e.last();o.strictEqual(e.length,2,"two dropdowns"),t.parent(".dropdown").on("shown.bs.dropdown",(function(){o.strictEqual(t.parents(".show").length,1,'"show" class added on click'),o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,1,"only one dropdown is shown");var d=$.Event("keyup");d.which=9,$(document.body).trigger(d)})).on("hidden.bs.dropdown",(function(){o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,0,'"show" class removed'),a.trigger("click")})),a.parent(".btn-group").on("shown.bs.dropdown",(function(){o.strictEqual(a.parent(".show").length,1,'"show" class added on click'),o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,1,"only one dropdown is shown");var d=$.Event("keyup");d.which=9,$(document.body).trigger(d)})).on("hidden.bs.dropdown",(function(){o.strictEqual($("#qunit-fixture .dropdown-menu.show").length,0,'"show" class removed'),d()})),t.trigger("click")})),QUnit.test("should fire show and hide event",(function(o){o.expect(2);var d='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=o.async();n.parent(".dropdown").on("show.bs.dropdown",(function(){o.ok(!0,"show was fired")})).on("hide.bs.dropdown",(function(){o.ok(!0,"hide was fired"),e()})),n.trigger("click"),$(document.body).trigger("click")})),QUnit.test("should fire shown and hidden event",(function(o){o.expect(2);var d='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=o.async();n.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired")})).on("hidden.bs.dropdown",(function(){o.ok(!0,"hidden was fired"),e()})),n.trigger("click"),$(document.body).trigger("click")})),QUnit.test("should fire shown and hidden event with a relatedTarget",(function(o){o.expect(2);var d='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=o.async();n.parent(".dropdown").on("hidden.bs.dropdown",(function(d){o.strictEqual(d.relatedTarget,n[0]),e()})).on("shown.bs.dropdown",(function(d){o.strictEqual(d.relatedTarget,n[0]),$(document.body).trigger("click")})),n.trigger("click")})),QUnit.test("should fire hide and hidden event with a clickEvent",(function(o){o.expect(3);var d='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.parent(".dropdown").on("hide.bs.dropdown",(function(d){o.ok(d.clickEvent)})).on("hidden.bs.dropdown",(function(d){o.ok(d.clickEvent)})).on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),$(document.body).trigger("click")})),n.trigger("click")})),QUnit.test("should fire hide and hidden event without a clickEvent if event type is not click",(function(o){o.expect(3);var d='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.parent(".dropdown").on("hide.bs.dropdown",(function(d){o.notOk(d.clickEvent)})).on("hidden.bs.dropdown",(function(d){o.notOk(d.clickEvent)})).on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),n.trigger($.Event("keydown",{which:27}))})),n.trigger("click")})),QUnit.test("should ignore keyboard events within <input>s and <textarea>s",(function(o){o.expect(3);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a><input type="text" id="input"><textarea id="textarea"/></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#input"),a=$("#textarea");e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),t.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok($(document.activeElement).is(t),"input still focused"),a.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok($(document.activeElement).is(a),"textarea still focused"),d()})),e.trigger("click")})),QUnit.test("should skip disabled element when using keyboard navigation",(function(o){o.expect(3);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item disabled" href="#">Disabled link</a><button class="dropdown-item" type="button" disabled>Disabled button</button><a id="item1" class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),e.trigger($.Event("keydown",{which:40})),e.trigger($.Event("keydown",{which:40})),o.ok(!$(document.activeElement).is(".disabled"),".disabled is not focused"),o.ok(!$(document.activeElement).is(":disabled"),":disabled is not focused"),d()})),e.trigger("click")})),QUnit.test("should focus next/previous element when using keyboard navigation",(function(o){o.expect(4);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a id="item1" class="dropdown-item" href="#">A link</a><a id="item2" class="dropdown-item" href="#">Another link</a></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),e.trigger($.Event("keydown",{which:40})),o.ok($(document.activeElement).is($("#item1")),"item1 is focused"),$(document.activeElement).trigger($.Event("keydown",{which:40})),o.ok($(document.activeElement).is($("#item2")),"item2 is focused"),$(document.activeElement).trigger($.Event("keydown",{which:38})),o.ok($(document.activeElement).is($("#item1")),"item1 is focused"),d()})),e.trigger("click")})),QUnit.test("should not close the dropdown if the user clicks on a text field",(function(o){o.expect(2);var d=o.async(),n='<div class="dropdown"><button type="button" data-toggle="dropdown">Dropdown</button><div class="dropdown-menu"><input id="textField" type="text" /></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#textField");t.on("click",(function(){o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),d()})),e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),t.trigger($.Event("click"))})),e.trigger("click")})),QUnit.test("should not close the dropdown if the user clicks on a textarea",(function(o){o.expect(2);var d=o.async(),n='<div class="dropdown"><button type="button" data-toggle="dropdown">Dropdown</button><div class="dropdown-menu"><textarea id="textArea"></textarea></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#textArea");t.on("click",(function(){o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),d()})),e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),t.trigger($.Event("click"))})),e.trigger("click")})),QUnit.test("Dropdown should not use Popper.js in navbar",(function(o){o.expect(1);var d=o.async(),n='<nav class="navbar navbar-expand-md navbar-light bg-light"><div class="dropdown">  <a class="nav-link dropdown-toggle" href="#" id="dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</a>  <div class="dropdown-menu" aria-labelledby="dropdown">    <a class="dropdown-item" href="#">Action</a>    <a class="dropdown-item" href="#">Another action</a>    <a class="dropdown-item" href="#">Something else here</a>  </div></div></nav>';$(n).appendTo("#qunit-fixture");var e=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=e.next();e.parent(".dropdown").on("shown.bs.dropdown",(function(){o.ok("undefined"===typeof t.attr("style"),"No inline style applied by Popper.js"),d()})),e.trigger($.Event("click"))})),QUnit.test("should close dropdown and set focus back to toggle when escape is pressed while focused on a dropdown item",(function(o){o.expect(3);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" id="toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" id="item" href="#">Menu item</a></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#item"),a=$("#toggle");e.parent(".dropdown").on("shown.bs.dropdown",(function(){t[0].focus(),o.ok($(document.activeElement)[0]===t[0],"menu item initial focus set"),t.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(!e.parent(".dropdown").hasClass("show"),"dropdown menu was closed after escape"),o.ok($(document.activeElement)[0]===a[0],"toggle has focus again once menu was closed after escape"),d()})),e.trigger($.Event("click"))})),QUnit.test("should ignore keyboard events for <input>s and <textarea>s within dropdown-menu, except for escape key",(function(o){o.expect(7);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a><input type="text" id="input"><textarea id="textarea"/></div></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#input"),a=$("#textarea");e.parent(".dropdown").on("shown.bs.dropdown",(function(){t.trigger("focus").trigger($.Event("keydown",{which:32})),o.ok($(document.activeElement)[0]===t[0],"input still focused"),a.trigger("focus").trigger($.Event("keydown",{which:32})),o.ok($(document.activeElement)[0]===a[0],"textarea still focused"),t.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok($(document.activeElement)[0]===t[0],"input still focused"),a.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok($(document.activeElement)[0]===a[0],"textarea still focused"),t.trigger("focus").trigger($.Event("keydown",{which:40})),o.ok($(document.activeElement)[0]===t[0],"input still focused"),a.trigger("focus").trigger($.Event("keydown",{which:40})),o.ok($(document.activeElement)[0]===a[0],"textarea still focused"),t.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(!e.parent(".dropdown").hasClass("show"),"dropdown menu is not shown"),d()})),e.trigger("click")})),QUnit.test("should ignore space key events for <input>s within dropdown, and accept up, down and escape",(function(o){o.expect(6);var d=o.async(),n='<ul class="nav tabs">  <li class="dropdown">    <input type="text" id="input" data-toggle="dropdown">    <div class="dropdown-menu" role="menu">      <a id="item1" class="dropdown-item" href="#">Secondary link</a>      <a id="item2" class="dropdown-item" href="#">Something else here</a>      <div class="divider"></div>      <a class="dropdown-item" href="#">Another link</a>    </div>  </li></ul>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#input");e.parent(".dropdown").one("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),t.trigger("focus").trigger($.Event("keydown",{which:32})),o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),o.ok($(document.activeElement).is(t),"input is still focused"),t.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(!e.parent(".dropdown").hasClass("show"),"dropdown menu is not shown"),e.parent(".dropdown").one("shown.bs.dropdown",(function(){t.trigger("focus").trigger($.Event("keydown",{which:40})),o.ok(document.activeElement===$("#item1")[0],"item1 is focused"),e.parent(".dropdown").one("shown.bs.dropdown",(function(){t.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok(document.activeElement===$("#item1")[0],"item1 is focused"),d()})).bootstrapDropdown("toggle"),t.trigger("click")})),t.trigger("click")})),t.trigger("click")})),QUnit.test("should ignore space key events for <textarea>s within dropdown, and accept up, down and escape",(function(o){o.expect(6);var d=o.async(),n='<ul class="nav tabs">  <li class="dropdown">    <textarea id="textarea" data-toggle="dropdown"></textarea>    <div class="dropdown-menu" role="menu">      <a id="item1" class="dropdown-item" href="#">Secondary link</a>      <a id="item2" class="dropdown-item" href="#">Something else here</a>      <div class="divider"></div>      <a class="dropdown-item" href="#">Another link</a>    </div>  </li></ul>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("#textarea");e.parent(".dropdown").one("shown.bs.dropdown",(function(){o.ok(!0,"shown was fired"),t.trigger("focus").trigger($.Event("keydown",{which:32})),o.ok(e.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),o.ok($(document.activeElement).is(t),"textarea is still focused"),t.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(!e.parent(".dropdown").hasClass("show"),"dropdown menu is not shown"),e.parent(".dropdown").one("shown.bs.dropdown",(function(){t.trigger("focus").trigger($.Event("keydown",{which:40})),o.ok(document.activeElement===$("#item1")[0],"item1 is focused"),e.parent(".dropdown").one("shown.bs.dropdown",(function(){t.trigger("focus").trigger($.Event("keydown",{which:38})),o.ok(document.activeElement===$("#item1")[0],"item1 is focused"),d()})).bootstrapDropdown("toggle"),t.trigger("click")})),t.trigger("click")})),t.trigger("click")})),QUnit.test("should not stop key event propagation when dropdown is disabled",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" id="toggle" data-toggle="dropdown" disabled>Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" id="item" href="#">Menu item</a></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("body");$(document).on("keydown",(function(){t.addClass("event-handled")})),e.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(t.hasClass("event-handled"),"ESC key event was propagated"),d()})),QUnit.test("should not stop ESC key event propagation when dropdown is not active",(function(o){o.expect(1);var d=o.async(),n='<div class="tabs"><div class="dropdown"><a href="#" class="dropdown-toggle" id="toggle" data-toggle="dropdown">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" id="item" href="#">Menu item</a></div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),t=$("body");$(document).on("keydown",(function(){t.addClass("event-handled")})),e.trigger("focus").trigger($.Event("keydown",{which:27})),o.ok(t.hasClass("event-handled"),"ESC key event was propagated"),d()})),QUnit.test("should not use Popper.js if display set to static",(function(o){o.expect(1);var d='<div class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" data-display="static">Dropdown</a><div class="dropdown-menu"><a class="dropdown-item" href="#">Secondary link</a><a class="dropdown-item" href="#">Something else here</a><div class="divider"/><a class="dropdown-item" href="#">Another link</a></div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=o.async(),t=n.next()[0];n.parent(".dropdown").on("shown.bs.dropdown",(function(){o.strictEqual(t.getAttribute("x-placement"),null),e()})),n.trigger("click")})),QUnit.test("should call Popper.js and detect navbar on update",(function(o){o.expect(3);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown");e.toggle(),o.ok(e._popper);var t=sinon.spy(e._popper,"scheduleUpdate"),a=sinon.spy(e,"_detectNavbar");e.update(),o.ok(t.called),o.ok(a.called)})),QUnit.test("should just detect navbar on update",(function(o){o.expect(2);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=sinon.spy(e,"_detectNavbar");e.update(),o.notOk(e._popper),o.ok(t.called)})),QUnit.test("should dispose dropdown with Popper",(function(o){o.expect(6);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown");e.toggle(),o.ok(e._popper),o.ok(null!==e._menu),o.ok(null!==e._element);var t=sinon.spy(e._popper,"destroy");e.dispose(),o.ok(t.called),o.ok(null===e._menu),o.ok(null===e._element)})),QUnit.test("should dispose dropdown",(function(o){o.expect(5);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown");o.notOk(e._popper),o.ok(null!==e._menu),o.ok(null!==e._element),e.dispose(),o.ok(null===e._menu),o.ok(null===e._element)})),QUnit.test("should show dropdown",(function(o){o.expect(2);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=o.async();n.parent(".dropdown").on("show.bs.dropdown",(function(){o.ok(!0,"show was fired")})).on("shown.bs.dropdown",(function(){o.ok(n.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),t()})),e.show()})),QUnit.test("should hide dropdown",(function(o){o.expect(2);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=o.async();n.trigger("click"),n.parent(".dropdown").on("hide.bs.dropdown",(function(){o.ok(!0,"hide was fired")})).on("hidden.bs.dropdown",(function(){o.ok(!n.parent(".dropdown").hasClass("show"),"dropdown menu is hidden"),t()})),e.hide()})),QUnit.test("should not hide dropdown",(function(o){o.expect(1);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown");n.trigger("click"),e.show(),o.ok(n.parent(".dropdown").hasClass("show"),"dropdown menu is still shown")})),QUnit.test("should not show dropdown",(function(o){o.expect(1);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown");e.hide(),o.ok(!n.parent(".dropdown").hasClass("show"),"dropdown menu is still hidden")})),QUnit.test("should show dropdown",(function(o){o.expect(3);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=o.async();n.parent(".dropdown").on("show.bs.dropdown",(function(){o.ok(null===e._popper),o.ok(!0,"show was fired")})).on("shown.bs.dropdown",(function(){o.ok(n.parent(".dropdown").hasClass("show"),"dropdown menu is shown"),t()})),e.show()})),QUnit.test("should prevent default event on show method call",(function(o){o.expect(1);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=o.async();n.parent(".dropdown").on("show.bs.dropdown",(function(o){o.preventDefault(),t()})),e.show(),o.ok(!n.parent(".dropdown").hasClass("show"),"dropdown menu is hidden")})),QUnit.test("should prevent default event on hide method call",(function(o){o.expect(1);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=n.data("bs.dropdown"),t=o.async();n.trigger("click"),n.parent(".dropdown").on("hide.bs.dropdown",(function(o){o.preventDefault(),t()})),e.hide(),o.ok(n.parent(".dropdown").hasClass("show"),"dropdown menu is shown")})),QUnit.test("should not open dropdown via show method if target is disabled via attribute",(function(o){o.expect(1);var d='<div class="dropdown">  <button disabled href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>';$(d).appendTo("#qunit-fixture");var n=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.show(),o.ok(!n.parent(".dropdown").hasClass("show"))})),QUnit.test("should not open dropdown via show method if target is disabled via class",(function(o){o.expect(1);var d='<div class="dropdown">  <button href="#" class="btn dropdown-toggle disabled" data-toggle="dropdown">Dropdown</button>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>';$(d).appendTo("#qunit-fixture");var n=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.show(),o.ok(!n.parent(".dropdown").hasClass("show"))})),QUnit.test("should not hide dropdown via hide method if target is disabled via attribute",(function(o){o.expect(1);var d='<div class="dropdown show">  <button disabled href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>';$(d).appendTo("#qunit-fixture");var n=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.hide(),o.ok(n.parent(".dropdown").hasClass("show"))})),QUnit.test("should not hide dropdown via hide method if target is disabled via class",(function(o){o.expect(1);var d='<div class="dropdown show">  <button href="#" class="btn dropdown-toggle disabled" data-toggle="dropdown">Dropdown</button>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>';$(d).appendTo("#qunit-fixture");var n=$("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();n.hide(),o.ok(n.parent(".dropdown").hasClass("show"))})),QUnit.test("should create offset modifier correctly when offset option is a function",(function(o){o.expect(2);var d=function(o){return o},n='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',e=$(n).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown({offset:d}),t=e.data("bs.dropdown"),a=t._getOffset();o.ok("undefined"===typeof a.offset),o.ok("function"===typeof a.fn)})),QUnit.test("should create offset modifier correctly when offset option is not a function",(function(o){o.expect(2);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=42,e=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown({offset:n}),t=e.data("bs.dropdown"),a=t._getOffset();o.strictEqual(a.offset,n),o.ok("undefined"===typeof a.fn)})),QUnit.test("should allow to pass config to popper.js with `popperConfig`",(function(o){o.expect(1);var d='<div class="dropdown">  <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a>  <div class="dropdown-menu">    <a class="dropdown-item" href="#">Another link</a>  </div></div>',n=$(d).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown({popperConfig:{placement:"left"}}),e=n.data("bs.dropdown"),t=e._getPopperConfig();o.strictEqual(t.placement,"left")})),QUnit.test("should destroy old popper references on toggle",(function(o){o.expect(3);var d=o.async(),n=['<div class="first dropdown">','  <button href="#" class="firstBtn btn" data-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>",'<div class="second dropdown">','  <button href="#" class="secondBtn btn" data-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");$(n).appendTo("#qunit-fixture");var e,t=$(".firstBtn").bootstrapDropdown(),a=$(".secondBtn").bootstrapDropdown(),s=$(".first"),r=$(".second"),i=t.data("bs.dropdown"),p=a.data("bs.dropdown");s.one("shown.bs.dropdown",(function(){o.strictEqual(s.hasClass("show"),!0),e=sinon.spy(i._popper,"destroy"),p.toggle()})),r.one("shown.bs.dropdown",(function(){o.strictEqual(r.hasClass("show"),!0),o.ok(e.called),d()})),i.toggle()})),QUnit.test("should hide a dropdown and destroy popper",(function(o){o.expect(1);var d=o.async(),n=['<div class="dropdown">','  <button href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");$(n).appendTo("#qunit-fixture");var e,t=$(".dropdown"),a=$('[data-toggle="dropdown"]').bootstrapDropdown().data("bs.dropdown");t.one("shown.bs.dropdown",(function(){e=sinon.spy(a._popper,"destroy"),a.hide()})),t.one("hidden.bs.dropdown",(function(){o.ok(e.called),d()})),a.show(!0)})),QUnit.test("it should skip hidden element when using keyboard navigation",(function(o){o.expect(3);var d=o.async(),n=["<style>","  .d-none {","    display: none;","  }","</style>",'<div class="dropdown">','  <button href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <button class="dropdown-item d-none" type="button">Hidden button by class</button>','    <a class="dropdown-item" href="#sub1" style="display: none">Hidden link</a>','    <a class="dropdown-item" href="#sub1" style="visibility: hidden">Hidden link</a>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");$(n).appendTo("#qunit-fixture");var e=$(".dropdown"),t=$('[data-toggle="dropdown"]').bootstrapDropdown();e.one("shown.bs.dropdown",(function(){t.trigger($.Event("keydown",{which:40})),o.strictEqual($(document.activeElement).hasClass("d-none"),!1,".d-none not focused"),o.strictEqual("none"===$(document.activeElement).css("display"),!1,'"display: none" not focused'),o.strictEqual("hidden"===document.activeElement.style.visibility,!1,'"visibility: hidden" not focused'),d()})),t.trigger("click")}))}));