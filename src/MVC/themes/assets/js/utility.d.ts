declare function is_localhost(): RegExpMatchArray;
declare function forceSSL(): void;
declare function isNativeEvent(eventname: any): boolean;
declare function hasEventBeenAdded(type: any): boolean;
declare function call_user_func(functionName: string, context: Window, ...args: any[]): any;
declare function prevent_iframe(): void;
declare function tafocus(id: string, placeholder: string): void;
declare function formatNewLines(placeholder: string): string;
declare function countNewLines(placeholder: string): string | number;
declare function isJSON(obj: Object | Array<any>): any;
declare function findDups(arr: Array<any>, callback: Function): any;
declare function makeid(length: number): string;
declare function gexec(action: any, retry: any, callback: any): void;
declare function geToken(): string;
declare function JavaScriptCaller(url: string, callback: Function): void;
declare function getKey(passphrase: string, salt: string): any;
declare function userJSEncrypt(passphrase: string, plainText: string): any;
declare function userJSDecrypt(passphrase: string, encryptedText: string): any;
declare function setInputFilter(textbox: any, inputFilter: any): void;
declare function e_modal_error(data: any): void;
declare function e_modal_success(data: any): void;
declare function openInNewTab(url: any, name: any): void;
declare function get_currency_symbol(filter: any): string;
declare function CryptoK(passphrase: string, salt: string): any;
declare function CryptoE(passphrase: string, plainText: string, salt: string, iv: string): any;
declare function CryptoD(passphrase: string, encryptedText: string, salt: string, iv: string): any;
declare function GeneratorID(): void;
declare class GeneratorID {
    rand: number;
    genId(): number;
    getId(): string;
}
declare function createJSON(jsObj: any, tabs: boolean): string;
declare function loadingio(text: any, callback: any, mode: any, ...args: any[]): void;
declare function LoadScript(url: any, callback: any): void;
declare function isAdmin(successcb: any, errorcb: any): void;
declare function loadCSS(CSSFiles: string): void;
declare function createLink(CSSFile: any, type: any, rel: any): void;
declare function __call(func: string, ...args: any[]): void;
declare function parse_proxy(str: string): Array<any>;
declare function array_rand(arrays: Array<any>, unique: boolean): {
    index: number;
    value: any;
};
declare function array_unique(arrays: Array<any>): any[];
declare function array_unset(arrayName: Array<any>, key: string | number): any[];
declare function Loading(text: {
    title: string;
    content: string;
    footer: string;
}, options: {
    callback: Function;
    position: string;
    disable: boolean;
}): any;
declare function toogleClass(element: Element, className: string): boolean;
declare function UNIQUE_ID(): string;
declare function array_shuffle(a: Array<any>): any[];
declare function check_blogger(callback: Function): void;
declare function pseudo_builder(string: string): string;
declare function foreach(object: Object, callback: Function): void;
declare function getRandom(arr: Array<any>, n: number, callback: Function): any;
declare function prepEntities(str: string): string;
declare var textAreas: HTMLCollectionOf<HTMLTextAreaElement>;
declare var events: {};
declare var original: {
    <K extends "error" | "abort" | "message" | "input" | "progress" | "select" | "change" | "afterprint" | "beforeprint" | "beforeunload" | "blur" | "canplay" | "canplaythrough" | "click" | "compassneedscalibration" | "contextmenu" | "dblclick" | "devicelight" | "devicemotion" | "deviceorientation" | "deviceorientationabsolute" | "drag" | "dragend" | "dragenter" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "ended" | "focus" | "hashchange" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "mousewheel" | "MSGestureChange" | "MSGestureDoubleTap" | "MSGestureEnd" | "MSGestureHold" | "MSGestureStart" | "MSGestureTap" | "MSInertiaStart" | "MSPointerCancel" | "MSPointerDown" | "MSPointerEnter" | "MSPointerLeave" | "MSPointerMove" | "MSPointerOut" | "MSPointerOver" | "MSPointerUp" | "offline" | "online" | "orientationchange" | "pagehide" | "pageshow" | "pause" | "play" | "playing" | "popstate" | "ratechange" | "readystatechange" | "reset" | "resize" | "scroll" | "seeked" | "seeking" | "stalled" | "storage" | "submit" | "suspend" | "timeupdate" | "unload" | "volumechange" | "vrdisplayactivate" | "vrdisplayblur" | "vrdisplayconnect" | "vrdisplaydeactivate" | "vrdisplaydisconnect" | "vrdisplayfocus" | "vrdisplaypointerrestricted" | "vrdisplaypointerunrestricted" | "vrdisplaypresentchange" | "waiting" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "cancel" | "close" | "cuechange" | "dragexit" | "focusin" | "focusout" | "gotpointercapture" | "lostpointercapture" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "securitypolicyviolation" | "selectionchange" | "selectstart" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "wheel" | "languagechange" | "messageerror" | "rejectionhandled" | "unhandledrejection">(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
} & typeof addEventListener;
declare var salt: string;
declare var iv: string;
declare var iterations: string;
declare var INPT: NodeListOf<Element>;
declare var index: number;
declare var element: Element;
declare var modal: JQuery<HTMLElement>;
declare var inputrp: JQuery<HTMLElement>;
declare var select_method: JQuery<HTMLElement>;
declare var hash: string;
declare var result: {};
declare var elm: JQuery<HTMLElement>;
declare var L: JQuery<HTMLElement>;
declare var nwtb: JQuery<HTMLElement>;
declare var aform: JQuery<HTMLElement>;
declare var GID: GeneratorID;
declare var IV: number;
declare var GI: string;
declare var ST: string;
declare var LoadingOpt: any;
declare var entityMap: {
    160: string;
    161: string;
    162: string;
    163: string;
    164: string;
    165: string;
    166: string;
    167: string;
    168: string;
    169: string;
    8364: string;
};
